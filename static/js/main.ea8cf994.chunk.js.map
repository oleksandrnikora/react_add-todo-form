{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","App","useState","setTitle","setUserId","todosFromServer","setTodos","isTitleEmpty","setIsTitleEmpty","isUserNotSelected","setIsUserNotSelected","todosWithUsers","usersFromServer","find","newTodo","reduce","max","currentUser","action","method","onSubmit","event","preventDefault","trim","currentTodos","htmlFor","type","value","onChange","target","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea8cf994.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { TodoWithUser } from '../../types/TodoWithUser';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user\n        ? <UserInfo user={user} />\n        : 'No user'}\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../types/TodoWithUser';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { TodoWithUser } from './types/TodoWithUser';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (id: number) => {\n  return usersFromServer.find(user => user.id === id) || null;\n};\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isUserNotSelected, setIsUserNotSelected] = useState(false);\n\n  const changeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitleEmpty(false);\n  };\n\n  const changeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setIsUserNotSelected(false);\n  };\n\n  const todosWithUsers: TodoWithUser[] = todos\n    .map(todo => ({\n      ...todo,\n      user: getUserById(todo.userId) || null,\n    }));\n\n  const maxId: number = todosWithUsers.reduce((max, currentUser) => {\n    return max >= currentUser.id\n      ? max\n      : currentUser.id;\n  }, 0);\n\n  const newTodo: Todo = {\n    id: maxId + 1,\n    title,\n    completed: false,\n    userId,\n  };\n  const clearForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (userId && title.trim()) {\n      setTodos((currentTodos) => [...currentTodos, newTodo]);\n      clearForm();\n      setIsTitleEmpty(false);\n      setIsUserNotSelected(false);\n    }\n\n    setIsTitleEmpty(!title.trim());\n    setIsUserNotSelected(!userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            {'Title: '}\n          </label>\n\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={changeTitle}\n            placeholder=\"Enter a title\"\n          />\n          {isTitleEmpty\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"username\">\n            {'User: '}\n          </label>\n\n          <select\n            id=\"username\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={changeUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n\n          {isUserNotSelected\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosWithUsers} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}